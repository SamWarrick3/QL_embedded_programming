<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\base_practice.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\base_practice.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Sat Jan 25 12:46:05 2025
<BR><P>
<H3>Maximum Stack Usage =        312 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; QActive_start_ &rArr; QXK_activate_ &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onError
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2a]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[f]">DMAMUX1_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from bsp.o(.text.EXTI4_15_IRQHandler) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from qxk_port.o(.text.NMI_Handler) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from qxk_port.o(.text.PendSV_Handler) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[25]">QHsm_dispatch_</a> from qep_hsm.o(.text.QHsm_dispatch_) referenced from qf_qact.o(.rodata.QActive_ctor.vtable)
 <LI><a href="#[25]">QHsm_dispatch_</a> from qep_hsm.o(.text.QHsm_dispatch_) referenced from qep_hsm.o(.rodata.QHsm_ctor.vtable)
 <LI><a href="#[24]">QHsm_init_</a> from qep_hsm.o(.text.QHsm_init_) referenced from qf_qact.o(.rodata.QActive_ctor.vtable)
 <LI><a href="#[24]">QHsm_init_</a> from qep_hsm.o(.text.QHsm_init_) referenced from qep_hsm.o(.rodata.QHsm_ctor.vtable)
 <LI><a href="#[20]">QHsm_top</a> from qep_hsm.o(.text.QHsm_top) referenced from qep_hsm.o(.text.QHsm_init_)
 <LI><a href="#[1e]">QXK_activate_</a> from qxk.o(.text.QXK_activate_) referenced from qxk_port.o(.text.PendSV_Handler)
 <LI><a href="#[21]">QXK_threadExit_</a> from qxk.o(.text.QXK_threadExit_) referenced from qxk_port.o(.text.QXThread_stackInit_)
 <LI><a href="#[1f]">QXK_thread_ret</a> from qxk_port.o(.text.QXK_thread_ret) referenced from qxk_port.o(.text.PendSV_Handler)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[27]">Rectangle_area</a> from rectangle.o(.text.Rectangle_area) referenced from rectangle.o(.rodata.Rectangle_ctor.vtable)
 <LI><a href="#[26]">Rectangle_draw</a> from rectangle.o(.text.Rectangle_draw) referenced from rectangle.o(.rodata.Rectangle_ctor.vtable)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[18]">SPI1_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[29]">Shape_area</a> from shape.o(.text.Shape_area) referenced from shape.o(.rodata.Shape_ctor.vtable)
 <LI><a href="#[28]">Shape_draw</a> from shape.o(.text.Shape_draw) referenced from shape.o(.rodata.Shape_ctor.vtable)
 <LI><a href="#[5]">SysTick_Handler</a> from bsp.o(.text.SysTick_Handler) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[1b]">SystemInit</a> from system_stm32c0xx.o(.text.SystemInit) referenced from startup_stm32c031xx.o(.text)
 <LI><a href="#[14]">TIM14_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[15]">TIM16_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[16]">TIM17_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[19]">USART1_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[1a]">USART2_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32c031xx.o(.text) referenced from startup_stm32c031xx.o(RESET)
 <LI><a href="#[1c]">__main</a> from __main.o(!!!main) referenced from startup_stm32c031xx.o(.text)
 <LI><a href="#[1d]">assert_failed</a> from bsp.o(.text.assert_failed) referenced from startup_stm32c031xx.o(.text)
 <LI><a href="#[22]">main_blinky1</a> from main.o(.text.main_blinky1) referenced from main.o(.text.main)
 <LI><a href="#[23]">main_blinky2</a> from main.o(.text.main_blinky2) referenced from main.o(.text.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2d]"></a>__scatterload_rt2</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[95]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[96]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[97]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[98]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[34]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[99]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[2f]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[9a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[39]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[af]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[b0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[b1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[b2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[b4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[b6]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[31]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[33]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[b7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[35]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; QActive_start_ &rArr; QXK_activate_ &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[48]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[38]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[b9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMAMUX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32c031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32c031xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3c]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_idivmod</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[c0]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[41]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[30]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[43]"></a>__Heap_Initialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[c4]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c6]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[c7]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[c8]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[37]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[45]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[44]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[3b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[49]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[4a]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[94]"></a>BSP_greenLedOff</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp.o(.text.BSP_greenLedOff))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_blinky2
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_blinky1
</UL>

<P><STRONG><a name="[93]"></a>BSP_greenLedOn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp.o(.text.BSP_greenLedOn))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_blinky2
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_blinky1
</UL>

<P><STRONG><a name="[92]"></a>BSP_init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, bsp.o(.text.BSP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp.o(.text.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EXTI4_15_IRQHandler &rArr; QXSemaphore_signal &rArr; QXK_sched_ &rArr; QPSet_findMax
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_signal
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qxk_port.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, qxk_port.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>QActive_ctor</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, qf_qact.o(.text.QActive_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QActive_ctor &rArr; QF_bzero_
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_ctor
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_bzero_
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_ctor
</UL>

<P><STRONG><a name="[50]"></a>QActive_get_</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, qf_actq.o(.text.QActive_get_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QActive_get_ &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
</UL>

<P><STRONG><a name="[52]"></a>QActive_post_</STRONG> (Thumb, 436 bytes, Stack size 64 bytes, qf_actq.o(.text.QActive_post_))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = QActive_post_ &rArr; QXK_activate_ &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_teDisarm_
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_update_
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_insert
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEvt_refCtr_inc_
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEvt_getPoolId_
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEvt_verify_
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_tick_
</UL>

<P><STRONG><a name="[5a]"></a>QActive_register_</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, qf_qact.o(.text.QActive_register_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QActive_register_ &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>

<P><STRONG><a name="[5b]"></a>QActive_start_</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, qxk.o(.text.QActive_start_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = QActive_start_ &rArr; QXK_activate_ &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_stackInit_
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_insert
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_update_
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_register_
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>QEQueue_init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, qf_qeq.o(.text.QEQueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = QEQueue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>

<P><STRONG><a name="[4e]"></a>QF_bzero_</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, qf_act.o(.text.QF_bzero_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QF_bzero_
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_init
</UL>

<P><STRONG><a name="[59]"></a>QF_gc</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, qf_dyn.o(.text.QF_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QF_gc &rArr; QMPool_put &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEvt_refCtr_dec_
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEvt_getPoolId_
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEvt_verify_
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
</UL>

<P><STRONG><a name="[64]"></a>QF_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, qxk.o(.text.QF_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QF_init &rArr; QF_bzero_
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_update_
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_bzero_
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>QF_onStartup</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bsp.o(.text.QF_onStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QF_onStartup &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[71]"></a>QF_qlog2</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, qxk_port.o(.text.QF_qlog2))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_findMax
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_findMax
</UL>

<P><STRONG><a name="[6c]"></a>QF_run</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, qxk.o(.text.QF_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = QF_run &rArr; QXK_activate_ &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_onIdle
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>QHsm_ctor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, qep_hsm.o(.text.QHsm_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QHsm_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>

<P><STRONG><a name="[25]"></a>QHsm_dispatch_</STRONG> (Thumb, 480 bytes, Stack size 64 bytes, qep_hsm.o(.text.QHsm_dispatch_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = QHsm_dispatch_ &rArr; QHsm_tran_ &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_tran_
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEvt_verify_
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
</UL>
<BR>[Address Reference Count : 2]<UL><LI> qep_hsm.o(.rodata.QHsm_ctor.vtable)
<LI> qf_qact.o(.rodata.QActive_ctor.vtable)
</UL>
<P><STRONG><a name="[24]"></a>QHsm_init_</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, qep_hsm.o(.text.QHsm_init_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QHsm_init_ &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
</UL>
<BR>[Address Reference Count : 2]<UL><LI> qep_hsm.o(.rodata.QHsm_ctor.vtable)
<LI> qf_qact.o(.rodata.QActive_ctor.vtable)
</UL>
<P><STRONG><a name="[20]"></a>QHsm_top</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, qep_hsm.o(.text.QHsm_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QHsm_top
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qep_hsm.o(.text.QHsm_init_)
</UL>
<P><STRONG><a name="[6f]"></a>QHsm_tran_</STRONG> (Thumb, 580 bytes, Stack size 48 bytes, qep_hsm.o(.text.QHsm_tran_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = QHsm_tran_ &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch_
</UL>

<P><STRONG><a name="[63]"></a>QMPool_put</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, qf_mem.o(.text.QMPool_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QMPool_put &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
</UL>

<P><STRONG><a name="[73]"></a>QTimeEvt_ctorX</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, qf_time.o(.text.QTimeEvt_ctorX))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QTimeEvt_ctorX &rArr; QEvt_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEvt_ctor
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_ctor
</UL>

<P><STRONG><a name="[75]"></a>QTimeEvt_tick_</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, qf_time.o(.text.QTimeEvt_tick_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = QTimeEvt_tick_ &rArr; QActive_post_ &rArr; QXK_activate_ &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_timeout_
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1e]"></a>QXK_activate_</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, qxk.o(.text.QXK_activate_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = QXK_activate_ &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_update_
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_remove
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_hasElement
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_findMax
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_isEmpty
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_verify_
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qxk_port.o(.text.PendSV_Handler)
</UL>
<P><STRONG><a name="[65]"></a>QXK_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, qxk_port.o(.text.QXK_init))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_init
</UL>

<P><STRONG><a name="[6d]"></a>QXK_onIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text.QXK_onIdle))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[4c]"></a>QXK_sched_</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, qxk.o(.text.QXK_sched_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QXK_sched_ &rArr; QPSet_findMax
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_hasElement
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_findMax
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_isEmpty
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_verify_
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_unblock_
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_block_
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_threadExit_
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_wait
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_signal
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[21]"></a>QXK_threadExit_</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, qxk.o(.text.QXK_threadExit_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QXK_threadExit_ &rArr; QXK_sched_ &rArr; QPSet_findMax
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_update_
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_remove
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qxk_port.o(.text.QXThread_stackInit_)
</UL>
<P><STRONG><a name="[1f]"></a>QXK_thread_ret</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, qxk_port.o(.text.QXK_thread_ret))
<BR>[Address Reference Count : 1]<UL><LI> qxk_port.o(.text.PendSV_Handler)
</UL>
<P><STRONG><a name="[7b]"></a>QXSemaphore_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, qxk_sema.o(.text.QXSemaphore_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QXSemaphore_init &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_setEmpty
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>QXSemaphore_signal</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, qxk_sema.o(.text.QXSemaphore_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QXSemaphore_signal &rArr; QXK_sched_ &rArr; QPSet_findMax
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_findMax
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_notEmpty
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_insert
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_update_
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_remove
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_teDisarm_
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>QXSemaphore_wait</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, qxk_sema.o(.text.QXSemaphore_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QXSemaphore_wait &rArr; QXK_sched_ &rArr; QPSet_findMax
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_hasElement
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_insert
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_update_
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_remove
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_teArm_
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_blinky2
</UL>

<P><STRONG><a name="[84]"></a>QXThread_block_</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, qxk_xthr.o(.text.QXThread_block_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QXThread_block_ &rArr; QXK_sched_ &rArr; QPSet_findMax
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_update_
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_remove
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delay
</UL>

<P><STRONG><a name="[87]"></a>QXThread_ctor</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, qxk_xthr.o(.text.QXThread_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QXThread_ctor &rArr; QTimeEvt_ctorX &rArr; QEvt_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>QXThread_delay</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, qxk_xthr.o(.text.QXThread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QXThread_delay &rArr; QXThread_block_ &rArr; QXK_sched_ &rArr; QPSet_findMax
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_block_
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_teArm_
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_blinky1
</UL>

<P><STRONG><a name="[5d]"></a>QXThread_stackInit_</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, qxk_port.o(.text.QXThread_stackInit_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QXThread_stackInit_
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>

<P><STRONG><a name="[82]"></a>QXThread_teArm_</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, qxk_xthr.o(.text.QXThread_teArm_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QXThread_teArm_ &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_wait
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delay
</UL>

<P><STRONG><a name="[56]"></a>QXThread_teDisarm_</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, qxk_xthr.o(.text.QXThread_teDisarm_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QXThread_teDisarm_
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_signal
</UL>

<P><STRONG><a name="[76]"></a>QXThread_timeout_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, qxk_xthr.o(.text.QXThread_timeout_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QXThread_timeout_ &rArr; QXThread_unblock_ &rArr; QXK_sched_ &rArr; QPSet_findMax
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_unblock_
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_tick_
</UL>

<P><STRONG><a name="[89]"></a>QXThread_unblock_</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, qxk_xthr.o(.text.QXThread_unblock_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QXThread_unblock_ &rArr; QXK_sched_ &rArr; QPSet_findMax
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_insert
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QPSet_update_
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_timeout_
</UL>

<P><STRONG><a name="[51]"></a>Q_onError</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp.o(.text.Q_onError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_tran_
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_block_
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_teArm_
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_threadExit_
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch_
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_init_
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_register_
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_wait
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delay
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_signal
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_tick_
</UL>

<P><STRONG><a name="[27]"></a>Rectangle_area</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, rectangle.o(.text.Rectangle_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Rectangle_area
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rectangle.o(.rodata.Rectangle_ctor.vtable)
</UL>
<P><STRONG><a name="[8c]"></a>Rectangle_ctor</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, rectangle.o(.text.Rectangle_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Rectangle_ctor &rArr; Shape_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shape_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>Rectangle_draw</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, rectangle.o(.text.Rectangle_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Rectangle_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rectangle.o(.rodata.Rectangle_ctor.vtable)
</UL>
<P><STRONG><a name="[8d]"></a>Shape_ctor</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, shape.o(.text.Shape_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Shape_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle_ctor
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>Shape_distanceTo</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, shape.o(.text.Shape_distanceTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Shape_distanceTo
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>Shape_moveBy</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, shape.o(.text.Shape_moveBy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Shape_moveBy
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SysTick_Handler &rArr; QTimeEvt_tick_ &rArr; QActive_post_ &rArr; QXK_activate_ &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_tick_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, system_stm32c0xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
</UL>

<P><STRONG><a name="[1b]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32c0xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>assert_failed</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bsp.o(.text.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32c031xx.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>drawGraph</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, shape.o(.text.drawGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drawGraph &rArr; Shape_draw_vcall
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shape_draw_vcall
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 508 bytes, Stack size 168 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = main &rArr; QActive_start_ &rArr; QXK_activate_ &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onError
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_ctor
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle_area
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle_draw
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle_ctor
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGraph
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shape_distanceTo
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shape_moveBy
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shape_ctor
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[22]"></a>main_blinky1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text.main_blinky1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = main_blinky1 &rArr; QXThread_delay &rArr; QXThread_block_ &rArr; QXK_sched_ &rArr; QPSet_findMax
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delay
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_greenLedOff
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_greenLedOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[23]"></a>main_blinky2</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text.main_blinky2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = main_blinky2 &rArr; QXSemaphore_wait &rArr; QXK_sched_ &rArr; QPSet_findMax
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_wait
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_greenLedOff
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_greenLedOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[69]"></a>SysTick_Config</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bsp.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
</UL>

<P><STRONG><a name="[6a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, bsp.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[6b]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, bsp.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
</UL>

<P><STRONG><a name="[8b]"></a>__NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onError
</UL>

<P><STRONG><a name="[28]"></a>Shape_draw</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, shape.o(.text.Shape_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Shape_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shape.o(.rodata.Shape_ctor.vtable)
</UL>
<P><STRONG><a name="[29]"></a>Shape_area</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, shape.o(.text.Shape_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Shape_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shape.o(.rodata.Shape_ctor.vtable)
</UL>
<P><STRONG><a name="[8f]"></a>Shape_draw_vcall</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, shape.o(.text.Shape_draw_vcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Shape_draw_vcall
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGraph
</UL>

<P><STRONG><a name="[53]"></a>QEvt_verify_</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, qf_actq.o(.text.QEvt_verify_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QEvt_verify_
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
</UL>

<P><STRONG><a name="[54]"></a>QEvt_getPoolId_</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, qf_actq.o(.text.QEvt_getPoolId_))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = QEvt_getPoolId_
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
</UL>

<P><STRONG><a name="[55]"></a>QEvt_refCtr_inc_</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, qf_actq.o(.text.QEvt_refCtr_inc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = QEvt_refCtr_inc_
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
</UL>

<P><STRONG><a name="[57]"></a>QPSet_insert</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, qf_actq.o(.text.QPSet_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QPSet_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
</UL>

<P><STRONG><a name="[58]"></a>QPSet_update_</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, qf_actq.o(.text.QPSet_update_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QPSet_update_
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
</UL>

<P><STRONG><a name="[60]"></a>QEvt_verify_</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, qf_dyn.o(.text.QEvt_verify_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QEvt_verify_
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
</UL>

<P><STRONG><a name="[61]"></a>QEvt_getPoolId_</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, qf_dyn.o(.text.QEvt_getPoolId_))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = QEvt_getPoolId_
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
</UL>

<P><STRONG><a name="[62]"></a>QEvt_refCtr_dec_</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, qf_dyn.o(.text.QEvt_refCtr_dec_))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = QEvt_refCtr_dec_
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
</UL>

<P><STRONG><a name="[74]"></a>QEvt_ctor</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, qf_time.o(.text.QEvt_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QEvt_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
</UL>

<P><STRONG><a name="[77]"></a>QPSet_verify_</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, qxk.o(.text.QPSet_verify_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QPSet_verify_
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
</UL>

<P><STRONG><a name="[79]"></a>QPSet_isEmpty</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, qxk.o(.text.QPSet_isEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = QPSet_isEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
</UL>

<P><STRONG><a name="[70]"></a>QPSet_findMax</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, qxk.o(.text.QPSet_findMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QPSet_findMax
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_qlog2
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
</UL>

<P><STRONG><a name="[7a]"></a>QPSet_hasElement</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, qxk.o(.text.QPSet_hasElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QPSet_hasElement
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
</UL>

<P><STRONG><a name="[78]"></a>QPSet_remove</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, qxk.o(.text.QPSet_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QPSet_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_threadExit_
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
</UL>

<P><STRONG><a name="[5f]"></a>QPSet_update_</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, qxk.o(.text.QPSet_update_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QPSet_update_
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_threadExit_
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_init
</UL>

<P><STRONG><a name="[5e]"></a>QPSet_insert</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, qxk.o(.text.QPSet_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QPSet_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>

<P><STRONG><a name="[7c]"></a>QPSet_setEmpty</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, qxk_sema.o(.text.QPSet_setEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = QPSet_setEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_init
</UL>

<P><STRONG><a name="[80]"></a>QPSet_remove</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, qxk_sema.o(.text.QPSet_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QPSet_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_wait
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_signal
</UL>

<P><STRONG><a name="[7f]"></a>QPSet_update_</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, qxk_sema.o(.text.QPSet_update_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QPSet_update_
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_wait
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_signal
</UL>

<P><STRONG><a name="[7e]"></a>QPSet_insert</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, qxk_sema.o(.text.QPSet_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QPSet_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_wait
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_signal
</UL>

<P><STRONG><a name="[83]"></a>QPSet_hasElement</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, qxk_sema.o(.text.QPSet_hasElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QPSet_hasElement
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_wait
</UL>

<P><STRONG><a name="[7d]"></a>QPSet_notEmpty</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, qxk_sema.o(.text.QPSet_notEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = QPSet_notEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_signal
</UL>

<P><STRONG><a name="[72]"></a>QPSet_findMax</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, qxk_sema.o(.text.QPSet_findMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QPSet_findMax
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_qlog2
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_signal
</UL>

<P><STRONG><a name="[85]"></a>QPSet_remove</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, qxk_xthr.o(.text.QPSet_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QPSet_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_block_
</UL>

<P><STRONG><a name="[86]"></a>QPSet_update_</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, qxk_xthr.o(.text.QPSet_update_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QPSet_update_
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_unblock_
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_block_
</UL>

<P><STRONG><a name="[8a]"></a>QPSet_insert</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, qxk_xthr.o(.text.QPSet_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QPSet_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_unblock_
</UL>

<P><STRONG><a name="[6e]"></a>QEvt_verify_</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, qep_hsm.o(.text.QEvt_verify_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QEvt_verify_
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch_
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
